// Generated by gencpp from file manipulation/multi_frameRequest.msg
// DO NOT EDIT!


#ifndef MANIPULATION_MESSAGE_MULTI_FRAMEREQUEST_H
#define MANIPULATION_MESSAGE_MULTI_FRAMEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace manipulation
{
template <class ContainerAllocator>
struct multi_frameRequest_
{
  typedef multi_frameRequest_<ContainerAllocator> Type;

  multi_frameRequest_()
    : req_id(0)  {
    }
  multi_frameRequest_(const ContainerAllocator& _alloc)
    : req_id(0)  {
  (void)_alloc;
    }



   typedef int16_t _req_id_type;
  _req_id_type req_id;





  typedef boost::shared_ptr< ::manipulation::multi_frameRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::manipulation::multi_frameRequest_<ContainerAllocator> const> ConstPtr;

}; // struct multi_frameRequest_

typedef ::manipulation::multi_frameRequest_<std::allocator<void> > multi_frameRequest;

typedef boost::shared_ptr< ::manipulation::multi_frameRequest > multi_frameRequestPtr;
typedef boost::shared_ptr< ::manipulation::multi_frameRequest const> multi_frameRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::manipulation::multi_frameRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::manipulation::multi_frameRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::manipulation::multi_frameRequest_<ContainerAllocator1> & lhs, const ::manipulation::multi_frameRequest_<ContainerAllocator2> & rhs)
{
  return lhs.req_id == rhs.req_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::manipulation::multi_frameRequest_<ContainerAllocator1> & lhs, const ::manipulation::multi_frameRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace manipulation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::manipulation::multi_frameRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::manipulation::multi_frameRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::manipulation::multi_frameRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::manipulation::multi_frameRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::manipulation::multi_frameRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::manipulation::multi_frameRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::manipulation::multi_frameRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d67e2fcd47f3255cc3fbcfba8a121186";
  }

  static const char* value(const ::manipulation::multi_frameRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd67e2fcd47f3255cULL;
  static const uint64_t static_value2 = 0xc3fbcfba8a121186ULL;
};

template<class ContainerAllocator>
struct DataType< ::manipulation::multi_frameRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "manipulation/multi_frameRequest";
  }

  static const char* value(const ::manipulation::multi_frameRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::manipulation::multi_frameRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 req_id\n"
;
  }

  static const char* value(const ::manipulation::multi_frameRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::manipulation::multi_frameRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.req_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct multi_frameRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::manipulation::multi_frameRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::manipulation::multi_frameRequest_<ContainerAllocator>& v)
  {
    s << indent << "req_id: ";
    Printer<int16_t>::stream(s, indent + "  ", v.req_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MANIPULATION_MESSAGE_MULTI_FRAMEREQUEST_H
